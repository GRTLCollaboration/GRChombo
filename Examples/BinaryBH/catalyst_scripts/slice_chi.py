# script-version: 2.0
# Catalyst state generated using paraview version 5.9.1

#### import the simple module from the paraview
from paraview.simple import *
#### disable automatic camera reset on 'Show'
paraview.simple._DisableFirstRenderCameraReset()

# ----------------------------------------------------------------
# setup views used in the visualization
# ----------------------------------------------------------------

# get the material library
materialLibrary1 = GetMaterialLibrary()

# Create a new 'Render View'
renderView1 = CreateView('RenderView')
renderView1.ViewSize = [885, 774]
renderView1.AxesGrid = 'GridAxes3DActor'
renderView1.CenterAxesVisibility = 1
renderView1.CenterOfRotation = [32.0, 32.0, 32.0]
renderView1.StereoType = 'Crystal Eyes'
renderView1.CameraPosition = [32.0, 32.0, 223.24355652982143]
renderView1.CameraFocalPoint = [32.0, 32.0, 32.0]
renderView1.CameraFocalDisk = 1.0
renderView1.CameraParallelScale = 49.49747468305833
renderView1.CameraParallelProjection = 1
renderView1.BackEnd = 'OSPRay raycaster'
renderView1.OSPRayMaterialLibrary = materialLibrary1

# init the 'GridAxes3DActor' selected for 'AxesGrid'
renderView1.AxesGrid.Visibility = 1

SetActiveView(None)

# ----------------------------------------------------------------
# setup view layouts
# ----------------------------------------------------------------

# create new layout object 'Layout #1'
layout1 = CreateLayout(name='Layout #1')
layout1.AssignView(0, renderView1)
layout1.SetSize(885, 774)

# ----------------------------------------------------------------
# restore active view
SetActiveView(renderView1)
# ----------------------------------------------------------------

# ----------------------------------------------------------------
# setup the data processing pipelines
# ----------------------------------------------------------------

# create a new 'VisItChomboReader'
input = VisItChomboReader(registrationName='input', FileName=['/home/miren/NR/GRChombo-public/Examples/BinaryBH/hdf5/BinaryBH_000000.3d.hdf5', '/home/miren/NR/GRChombo-public/Examples/BinaryBH/hdf5/BinaryBH_000001.3d.hdf5', '/home/miren/NR/GRChombo-public/Examples/BinaryBH/hdf5/BinaryBH_000003.3d.hdf5'])
input.MeshStatus = ['Mesh']
input.CellArrayStatus = ['chi']

# create a new 'Slice AMR data'
sliceAMRdata1 = SliceAMRdata(registrationName='SliceAMRdata1', Input=input)
sliceAMRdata1.Level = 3
sliceAMRdata1.OffSet = 35.0
sliceAMRdata1.Normal = 'Z-Normal'

# ----------------------------------------------------------------
# setup the visualization in view 'renderView1'
# ----------------------------------------------------------------

# show data from sliceAMRdata1
sliceAMRdata1Display = Show(sliceAMRdata1, renderView1, 'AMRRepresentation')

# get color transfer function/color map for 'chi'
chiLUT = GetColorTransferFunction('chi')
chiLUT.AutomaticRescaleRangeMode = 'Never'
chiLUT.RGBPoints = [0.0, 0.267004, 0.004874, 0.329415, 0.003921999999999982, 0.26851, 0.009605, 0.335427, 0.007843000000000046, 0.269944, 0.014625, 0.341379, 0.011765000000000027, 0.271305, 0.019942, 0.347269, 0.01568599999999998, 0.272594, 0.025563, 0.353093, 0.019607999999999962, 0.273809, 0.031497, 0.358853, 0.02352900000000003, 0.274952, 0.037752, 0.364543, 0.027451000000000014, 0.276022, 0.044167, 0.370164, 0.03137299999999999, 0.277018, 0.050344, 0.375715, 0.035294000000000054, 0.277941, 0.056324, 0.381191, 0.039216000000000036, 0.278791, 0.062145, 0.386592, 0.04313699999999999, 0.279566, 0.067836, 0.391917, 0.04705899999999996, 0.280267, 0.073417, 0.397163, 0.05098000000000004, 0.280894, 0.078907, 0.402329, 0.05490200000000001, 0.281446, 0.08432, 0.407414, 0.05882399999999999, 0.281924, 0.089666, 0.412415, 0.06274499999999995, 0.282327, 0.094955, 0.417331, 0.06666700000000005, 0.282656, 0.100196, 0.42216, 0.07058799999999998, 0.28291, 0.105393, 0.426902, 0.07450999999999998, 0.283091, 0.110553, 0.431554, 0.07843100000000004, 0.283197, 0.11568, 0.436115, 0.0823529999999999, 0.283229, 0.120777, 0.440584, 0.08627499999999999, 0.283187, 0.125848, 0.44496, 0.09019599999999996, 0.283072, 0.130895, 0.449241, 0.09411799999999991, 0.282884, 0.13592, 0.453427, 0.098039, 0.282623, 0.140926, 0.457517, 0.10196099999999998, 0.28229, 0.145912, 0.46151, 0.10588199999999992, 0.281887, 0.150881, 0.465405, 0.10980400000000001, 0.281412, 0.155834, 0.469201, 0.11372499999999998, 0.280868, 0.160771, 0.472899, 0.11764699999999993, 0.280255, 0.165693, 0.476498, 0.12156899999999993, 0.279574, 0.170599, 0.479997, 0.12549, 0.278826, 0.17549, 0.483397, 0.12941199999999997, 0.278012, 0.180367, 0.486697, 0.13333300000000006, 0.277134, 0.185228, 0.489898, 0.13725500000000004, 0.276194, 0.190074, 0.493001, 0.141176, 0.275191, 0.194905, 0.496005, 0.14509799999999998, 0.274128, 0.199721, 0.498911, 0.14902000000000007, 0.273006, 0.20452, 0.501721, 0.15294100000000002, 0.271828, 0.209303, 0.504434, 0.1568630000000001, 0.270595, 0.214069, 0.507052, 0.1607840000000001, 0.269308, 0.218818, 0.509577, 0.16470600000000007, 0.267968, 0.223549, 0.512008, 0.168627, 0.26658, 0.228262, 0.514349, 0.17254900000000012, 0.265145, 0.232956, 0.516599, 0.1764710000000001, 0.263663, 0.237631, 0.518762, 0.18039200000000005, 0.262138, 0.242286, 0.520837, 0.1843140000000001, 0.260571, 0.246922, 0.522828, 0.18823500000000007, 0.258965, 0.251537, 0.524736, 0.19215700000000005, 0.257322, 0.25613, 0.526563, 0.1960780000000001, 0.255645, 0.260703, 0.528312, 0.2000000000000001, 0.253935, 0.265254, 0.529983, 0.20392200000000008, 0.252194, 0.269783, 0.531579, 0.20784300000000003, 0.250425, 0.27429, 0.533103, 0.211765, 0.248629, 0.278775, 0.534556, 0.21568599999999996, 0.246811, 0.283237, 0.535941, 0.21960800000000005, 0.244972, 0.287675, 0.53726, 0.22352900000000014, 0.243113, 0.292092, 0.538516, 0.22745099999999996, 0.241237, 0.296485, 0.539709, 0.23137300000000008, 0.239346, 0.300855, 0.540844, 0.23529400000000006, 0.237441, 0.305202, 0.541921, 0.23921600000000004, 0.235526, 0.309527, 0.542944, 0.24313700000000008, 0.233603, 0.313828, 0.543914, 0.24705900000000008, 0.231674, 0.318106, 0.544834, 0.25098000000000004, 0.229739, 0.322361, 0.545706, 0.254902, 0.227802, 0.326594, 0.546532, 0.258824, 0.225863, 0.330805, 0.547314, 0.2627450000000001, 0.223925, 0.334994, 0.548053, 0.26666700000000004, 0.221989, 0.339161, 0.548752, 0.27058800000000016, 0.220057, 0.343307, 0.549413, 0.27451, 0.21813, 0.347432, 0.550038, 0.27843100000000004, 0.21621, 0.351535, 0.550627, 0.282353, 0.214298, 0.355619, 0.551184, 0.2862750000000001, 0.212395, 0.359683, 0.55171, 0.29019600000000007, 0.210503, 0.363727, 0.552206, 0.29411800000000016, 0.208623, 0.367752, 0.552675, 0.298039, 0.206756, 0.371758, 0.553117, 0.3019610000000001, 0.204903, 0.375746, 0.553533, 0.30588200000000004, 0.203063, 0.379716, 0.553925, 0.30980400000000013, 0.201239, 0.38367, 0.554294, 0.3137249999999999, 0.19943, 0.387607, 0.554642, 0.31764700000000007, 0.197636, 0.391528, 0.554969, 0.32156900000000005, 0.19586, 0.395433, 0.555276, 0.32549, 0.1941, 0.399323, 0.555565, 0.329412, 0.192357, 0.403199, 0.555836, 0.33333300000000005, 0.190631, 0.407061, 0.556089, 0.3372550000000002, 0.188923, 0.41091, 0.556326, 0.341176, 0.187231, 0.414746, 0.556547, 0.3450980000000001, 0.185556, 0.41857, 0.556753, 0.34902000000000005, 0.183898, 0.422383, 0.556944, 0.352941, 0.182256, 0.426184, 0.55712, 0.356863, 0.180629, 0.429975, 0.557282, 0.36078400000000005, 0.179019, 0.433756, 0.55743, 0.36470600000000003, 0.177423, 0.437527, 0.557565, 0.368627, 0.175841, 0.44129, 0.557685, 0.3725490000000001, 0.174274, 0.445044, 0.557792, 0.37647100000000006, 0.172719, 0.448791, 0.557885, 0.380392, 0.171176, 0.45253, 0.557965, 0.384314, 0.169646, 0.456262, 0.55803, 0.3882350000000001, 0.168126, 0.459988, 0.558082, 0.39215700000000003, 0.166617, 0.463708, 0.558119, 0.39607800000000015, 0.165117, 0.467423, 0.558141, 0.4000000000000001, 0.163625, 0.471133, 0.558148, 0.4039220000000001, 0.162142, 0.474838, 0.55814, 0.407843, 0.160665, 0.47854, 0.558115, 0.41176500000000016, 0.159194, 0.482237, 0.558073, 0.41568600000000006, 0.157729, 0.485932, 0.558013, 0.4196080000000001, 0.15627, 0.489624, 0.557936, 0.423529, 0.154815, 0.493313, 0.55784, 0.4274510000000001, 0.153364, 0.497, 0.557724, 0.43137300000000006, 0.151918, 0.500685, 0.557587, 0.435294, 0.150476, 0.504369, 0.55743, 0.4392160000000001, 0.149039, 0.508051, 0.55725, 0.44313700000000006, 0.147607, 0.511733, 0.557049, 0.44705900000000004, 0.14618, 0.515413, 0.556823, 0.45098, 0.144759, 0.519093, 0.556572, 0.4549019999999999, 0.143343, 0.522773, 0.556295, 0.45882400000000007, 0.141935, 0.526453, 0.555991, 0.4627450000000002, 0.140536, 0.530132, 0.555659, 0.466667, 0.139147, 0.533812, 0.555298, 0.4705880000000001, 0.13777, 0.537492, 0.554906, 0.47451000000000004, 0.136408, 0.541173, 0.554483, 0.4784310000000001, 0.135066, 0.544853, 0.554029, 0.4823530000000001, 0.133743, 0.548535, 0.553541, 0.4862750000000001, 0.132444, 0.552216, 0.553018, 0.490196, 0.131172, 0.555899, 0.552459, 0.4941180000000001, 0.129933, 0.559582, 0.551864, 0.49803900000000006, 0.128729, 0.563265, 0.551229, 0.501961, 0.127568, 0.566949, 0.550556, 0.505882, 0.126453, 0.570633, 0.549841, 0.509804, 0.125394, 0.574318, 0.549086, 0.5137250000000001, 0.124395, 0.578002, 0.548287, 0.5176470000000002, 0.123463, 0.581687, 0.547445, 0.5215690000000001, 0.122606, 0.585371, 0.546557, 0.5254900000000002, 0.121831, 0.589055, 0.545623, 0.5294120000000004, 0.121148, 0.592739, 0.544641, 0.5333330000000002, 0.120565, 0.596422, 0.543611, 0.5372550000000001, 0.120092, 0.600104, 0.54253, 0.5411760000000003, 0.119738, 0.603785, 0.5414, 0.5450980000000003, 0.119512, 0.607464, 0.540218, 0.5490200000000003, 0.119423, 0.611141, 0.538982, 0.552941, 0.119483, 0.614817, 0.537692, 0.5568630000000002, 0.119699, 0.61849, 0.536347, 0.5607840000000002, 0.120081, 0.622161, 0.534946, 0.5647060000000002, 0.120638, 0.625828, 0.533488, 0.5686270000000001, 0.12138, 0.629492, 0.531973, 0.5725490000000001, 0.122312, 0.633153, 0.530398, 0.5764710000000003, 0.123444, 0.636809, 0.528763, 0.5803920000000002, 0.12478, 0.640461, 0.527068, 0.5843140000000001, 0.126326, 0.644107, 0.525311, 0.5882350000000002, 0.128087, 0.647749, 0.523491, 0.5921570000000003, 0.130067, 0.651384, 0.521608, 0.5960780000000001, 0.132268, 0.655014, 0.519661, 0.6, 0.134692, 0.658636, 0.517649, 0.6039220000000002, 0.137339, 0.662252, 0.515571, 0.6078430000000002, 0.14021, 0.665859, 0.513427, 0.6117650000000003, 0.143303, 0.669459, 0.511215, 0.6156860000000001, 0.146616, 0.67305, 0.508936, 0.6196080000000003, 0.150148, 0.676631, 0.506589, 0.6235290000000002, 0.153894, 0.680203, 0.504172, 0.6274510000000002, 0.157851, 0.683765, 0.501686, 0.6313730000000002, 0.162016, 0.687316, 0.499129, 0.6352940000000001, 0.166383, 0.690856, 0.496502, 0.6392160000000003, 0.170948, 0.694384, 0.493803, 0.6431370000000001, 0.175707, 0.6979, 0.491033, 0.6470590000000003, 0.180653, 0.701402, 0.488189, 0.6509800000000002, 0.185783, 0.704891, 0.485273, 0.6549020000000002, 0.19109, 0.708366, 0.482284, 0.6588240000000003, 0.196571, 0.711827, 0.479221, 0.6627450000000001, 0.202219, 0.715272, 0.476084, 0.6666670000000003, 0.20803, 0.718701, 0.472873, 0.6705880000000001, 0.214, 0.722114, 0.469588, 0.6745100000000003, 0.220124, 0.725509, 0.466226, 0.6784310000000002, 0.226397, 0.728888, 0.462789, 0.6823530000000004, 0.232815, 0.732247, 0.459277, 0.6862750000000001, 0.239374, 0.735588, 0.455688, 0.6901960000000003, 0.24607, 0.73891, 0.452024, 0.6941180000000002, 0.252899, 0.742211, 0.448284, 0.6980390000000002, 0.259857, 0.745492, 0.444467, 0.7019610000000002, 0.266941, 0.748751, 0.440573, 0.7058820000000001, 0.274149, 0.751988, 0.436601, 0.7098040000000001, 0.281477, 0.755203, 0.432552, 0.7137250000000003, 0.288921, 0.758394, 0.428426, 0.7176470000000004, 0.296479, 0.761561, 0.424223, 0.7215690000000002, 0.304148, 0.764704, 0.419943, 0.7254900000000003, 0.311925, 0.767822, 0.415586, 0.7294120000000002, 0.319809, 0.770914, 0.411152, 0.7333330000000003, 0.327796, 0.77398, 0.40664, 0.7372550000000001, 0.335885, 0.777018, 0.402049, 0.7411760000000003, 0.344074, 0.780029, 0.397381, 0.7450980000000003, 0.35236, 0.783011, 0.392636, 0.7490200000000001, 0.360741, 0.785964, 0.387814, 0.7529410000000001, 0.369214, 0.788888, 0.382914, 0.7568630000000001, 0.377779, 0.791781, 0.377939, 0.7607840000000001, 0.386433, 0.794644, 0.372886, 0.7647060000000001, 0.395174, 0.797475, 0.367757, 0.768627, 0.404001, 0.800275, 0.362552, 0.7725490000000002, 0.412913, 0.803041, 0.357269, 0.7764710000000001, 0.421908, 0.805774, 0.35191, 0.7803920000000001, 0.430983, 0.808473, 0.346476, 0.7843140000000001, 0.440137, 0.811138, 0.340967, 0.7882350000000002, 0.449368, 0.813768, 0.335384, 0.7921570000000001, 0.458674, 0.816363, 0.329727, 0.7960780000000001, 0.468053, 0.818921, 0.323998, 0.8000000000000002, 0.477504, 0.821444, 0.318195, 0.803922, 0.487026, 0.823929, 0.312321, 0.8078430000000002, 0.496615, 0.826376, 0.306377, 0.8117650000000002, 0.506271, 0.828786, 0.300362, 0.8156860000000001, 0.515992, 0.831158, 0.294279, 0.819608, 0.525776, 0.833491, 0.288127, 0.8235290000000002, 0.535621, 0.835785, 0.281908, 0.8274510000000003, 0.545524, 0.838039, 0.275626, 0.8313730000000001, 0.555484, 0.840254, 0.269281, 0.835294, 0.565498, 0.84243, 0.262877, 0.8392160000000001, 0.575563, 0.844566, 0.256415, 0.8431370000000002, 0.585678, 0.846661, 0.249897, 0.8470590000000001, 0.595839, 0.848717, 0.243329, 0.8509800000000001, 0.606045, 0.850733, 0.236712, 0.8549020000000003, 0.616293, 0.852709, 0.230052, 0.8588240000000003, 0.626579, 0.854645, 0.223353, 0.8627450000000001, 0.636902, 0.856542, 0.21662, 0.866667, 0.647257, 0.8584, 0.209861, 0.8705880000000001, 0.657642, 0.860219, 0.203082, 0.8745100000000002, 0.668054, 0.861999, 0.196293, 0.8784310000000002, 0.678489, 0.863742, 0.189503, 0.8823530000000003, 0.688944, 0.865448, 0.182725, 0.886275, 0.699415, 0.867117, 0.175971, 0.8901960000000002, 0.709898, 0.868751, 0.169257, 0.8941180000000002, 0.720391, 0.87035, 0.162603, 0.8980390000000001, 0.730889, 0.871916, 0.156029, 0.901961, 0.741388, 0.873449, 0.149561, 0.9058820000000002, 0.751884, 0.874951, 0.143228, 0.9098040000000002, 0.762373, 0.876424, 0.137064, 0.9137250000000001, 0.772852, 0.877868, 0.131109, 0.9176470000000002, 0.783315, 0.879285, 0.125405, 0.9215690000000001, 0.79376, 0.880678, 0.120005, 0.9254900000000004, 0.804182, 0.882046, 0.114965, 0.9294120000000001, 0.814576, 0.883393, 0.110347, 0.9333330000000003, 0.82494, 0.88472, 0.106217, 0.9372550000000002, 0.83527, 0.886029, 0.102646, 0.9411760000000003, 0.845561, 0.887322, 0.099702, 0.945098, 0.85581, 0.888601, 0.097452, 0.94902, 0.866013, 0.889868, 0.095953, 0.9529410000000003, 0.876168, 0.891125, 0.09525, 0.9568630000000002, 0.886271, 0.892374, 0.095374, 0.960784, 0.89632, 0.893616, 0.096335, 0.964706, 0.906311, 0.894855, 0.098125, 0.9686270000000003, 0.916242, 0.896091, 0.100717, 0.9725490000000003, 0.926106, 0.89733, 0.104071, 0.9764710000000002, 0.935904, 0.89857, 0.108131, 0.980392, 0.945636, 0.899815, 0.112838, 0.984314, 0.9553, 0.901065, 0.118128, 0.9882350000000002, 0.964894, 0.902323, 0.123941, 0.9921570000000003, 0.974417, 0.90359, 0.130215, 0.996078, 0.983868, 0.904867, 0.136897, 1.0, 0.993248, 0.906157, 0.143936]
chiLUT.NanColor = [1.0, 0.0, 0.0]
chiLUT.ScalarRangeInitialized = 1.0

# get opacity transfer function/opacity map for 'chi'
chiPWF = GetOpacityTransferFunction('chi')
chiPWF.Points = [0.0, 1.0, 0.5, 0.0, 1.0, 1.0, 0.5, 0.0]
chiPWF.ScalarRangeInitialized = 1

# trace defaults for the display properties.
sliceAMRdata1Display.Representation = 'Surface'
sliceAMRdata1Display.ColorArrayName = ['CELLS', 'chi']
sliceAMRdata1Display.LookupTable = chiLUT
sliceAMRdata1Display.SelectTCoordArray = 'None'
sliceAMRdata1Display.SelectNormalArray = 'None'
sliceAMRdata1Display.SelectTangentArray = 'None'
sliceAMRdata1Display.OSPRayScaleFunction = 'PiecewiseFunction'
sliceAMRdata1Display.SelectOrientationVectors = 'None'
sliceAMRdata1Display.ScaleFactor = 7.0
sliceAMRdata1Display.SelectScaleArray = 'None'
sliceAMRdata1Display.GlyphType = 'Arrow'
sliceAMRdata1Display.GlyphTableIndexArray = 'None'
sliceAMRdata1Display.GaussianRadius = 0.35000000000000003
sliceAMRdata1Display.SetScaleArray = [None, '']
sliceAMRdata1Display.ScaleTransferFunction = 'PiecewiseFunction'
sliceAMRdata1Display.OpacityArray = [None, '']
sliceAMRdata1Display.OpacityTransferFunction = 'PiecewiseFunction'
sliceAMRdata1Display.DataAxesGrid = 'GridAxesRepresentation'
sliceAMRdata1Display.PolarAxes = 'PolarAxesRepresentation'
sliceAMRdata1Display.ScalarOpacityUnitDistance = 2.3023915422888135
sliceAMRdata1Display.ScalarOpacityFunction = chiPWF

# setup the color legend parameters for each legend in this view

# get color legend/bar for chiLUT in view renderView1
chiLUTColorBar = GetScalarBar(chiLUT, renderView1)
chiLUTColorBar.Title = 'chi'
chiLUTColorBar.ComponentTitle = ''

# set color bar visibility
chiLUTColorBar.Visibility = 1

# show color legend
sliceAMRdata1Display.SetScalarBarVisibility(renderView1, True)

# ----------------------------------------------------------------
# setup color maps and opacity mapes used in the visualization
# note: the Get..() functions create a new object, if needed
# ----------------------------------------------------------------

# ----------------------------------------------------------------
# setup extractors
# ----------------------------------------------------------------

# create extractor
pNG1 = CreateExtractor('PNG', renderView1, registrationName='PNG1')
# trace defaults for the extractor.
# init the 'PNG' selected for 'Writer'
pNG1.Writer.FileName = 'SliceChi_%.6ts%cm.png'
pNG1.Writer.ImageResolution = [885, 774]
pNG1.Writer.Format = 'PNG'
pNG1.Writer.ResetDisplay = 1

# ----------------------------------------------------------------
# restore active source
SetActiveSource(pNG1)
# ----------------------------------------------------------------

# ------------------------------------------------------------------------------
# Catalyst options
from paraview import catalyst
options = catalyst.Options()
options.GlobalTrigger = 'TimeStep'
options.EnableCatalystLive = 1
options.CatalystLiveTrigger = 'TimeStep'

# ------------------------------------------------------------------------------
if __name__ == '__main__':
    from paraview.simple import SaveExtractsUsingCatalystOptions
    # Code for non in-situ environments; if executing in post-processing
    # i.e. non-Catalyst mode, let's generate extracts using Catalyst options
    SaveExtractsUsingCatalystOptions(options)
