
#--------------------------------------------------------------

# Global timestep output options
timeStepToStartOutputAt=0
forceOutputAtFirstCall=False

# Global screenshot output options
imageFileNamePadding=6
rescale_lookuptable=False

# Whether or not to request specific arrays from the adaptor.
requestSpecificArrays=True

# a root directory under which all Catalyst output goes
rootDirectory='extracts'

# makes a cinema D index table
make_cinema_table=False

#--------------------------------------------------------------
# Code generated from cpstate.py to create the CoProcessor.
# paraview version 5.8.1
#--------------------------------------------------------------

from paraview.simple import *
from paraview import coprocessing

# ----------------------- CoProcessor definition -----------------------

def CreateCoProcessor():
  def _CreatePipeline(coprocessor, datadescription):
    class Pipeline:
      # state file generated using paraview version 5.8.1

      # ----------------------------------------------------------------
      # setup views used in the visualization
      # ----------------------------------------------------------------

      # trace generated using paraview version 5.8.1
      #
      # To ensure correct image size when batch processing, please search 
      # for and uncomment the line `# renderView*.ViewSize = [*,*]`

      #### disable automatic camera reset on 'Show'
      paraview.simple._DisableFirstRenderCameraReset()

      # get the material library
      materialLibrary1 = GetMaterialLibrary()

      # Black background
      LoadPalette('BlackBackground')

      # Create a new 'Render View'
      renderView1 = CreateView('RenderView')
      renderView1.ViewSize = [1092, 778]
      renderView1.AxesGrid = 'GridAxes3DActor'
      renderView1.OrientationAxesVisibility = 0
      renderView1.CenterOfRotation = [8.0, 8.0, 8.0]
      renderView1.StereoType = 'Crystal Eyes'
      renderView1.CameraPosition = [-31.513131514425908, 8.0, 8.0]
      renderView1.CameraFocalPoint = [8.0, 8.0, 8.0]
      renderView1.CameraViewUp = [0.0, 0.0, 1.0]
      renderView1.CameraFocalDisk = 1.0
      renderView1.CameraParallelScale = 12.374368670764582
      renderView1.BackEnd = 'OSPRay raycaster'
      renderView1.OSPRayMaterialLibrary = materialLibrary1
      renderView1.Background = [0.0, 0.0, 0.0]

      # register the view with coprocessor
      # and provide it with information such as the filename to use,
      # how frequently to write the images, etc.
      coprocessor.RegisterView(renderView1,
          filename='SliceA_%t.png', freq=1, fittoscreen=0, magnification=1, width=800, height=600, cinema={}, compression=5)
      renderView1.ViewTime = datadescription.GetTime()

      SetActiveView(None)

      # ----------------------------------------------------------------
      # setup view layouts
      # ----------------------------------------------------------------

      # create new layout object 'Layout #1'
      layout1 = CreateLayout(name='Layout #1')
      layout1.AssignView(0, renderView1)

      # ----------------------------------------------------------------
      # restore active view
      SetActiveView(renderView1)
      # ----------------------------------------------------------------

      # ----------------------------------------------------------------
      # setup the data processing pipelines
      # ----------------------------------------------------------------

      # create a new 'VisItChomboReader'
      # create a producer from a simulation input
      input = coprocessor.CreateProducer(datadescription, 'input')

      # create a new 'Slice'
      slice1 = Slice(Input=input)
      slice1.SliceType = 'Plane'
      slice1.HyperTreeGridSlicer = 'Plane'
      slice1.SliceOffsetValues = [0.0]

      # init the 'Plane' selected for 'SliceType'
      slice1.SliceType.Origin = [8.0, 8.0, 8.0]

      # init the 'Plane' selected for 'HyperTreeGridSlicer'
      slice1.HyperTreeGridSlicer.Origin = [8.0, 8.0, 8.0]

      # ----------------------------------------------------------------
      # setup the visualization in view 'renderView1'
      # ----------------------------------------------------------------

      # show data from slice1
      slice1Display = Show(slice1, renderView1, 'GeometryRepresentation')

      # get color transfer function/color map for 'A'
      aLUT = GetColorTransferFunction('A')
      aLUT.RGBPoints = [42.015869140625, 0.267004, 0.004874, 0.329415, 64.0117780078125, 0.26851, 0.009605, 0.335427, 86.00207853515624, 0.269944, 0.014625, 0.341379, 107.99798740234375, 0.271305, 0.019942, 0.347269, 129.9882879296875, 0.272594, 0.025563, 0.353093, 151.984196796875, 0.273809, 0.031497, 0.358853, 173.97449732421876, 0.274952, 0.037752, 0.364543, 195.97040619140625, 0.276022, 0.044167, 0.370164, 217.96631505859375, 0.277018, 0.050344, 0.375715, 239.9566155859375, 0.277941, 0.056324, 0.381191, 261.952524453125, 0.278791, 0.062145, 0.386592, 283.94282498046874, 0.279566, 0.067836, 0.391917, 305.93873384765624, 0.280267, 0.073417, 0.397163, 327.92903437499996, 0.280894, 0.078907, 0.402329, 349.9249432421875, 0.281446, 0.08432, 0.407414, 371.920852109375, 0.281924, 0.089666, 0.412415, 393.9111526367187, 0.282327, 0.094955, 0.417331, 415.9070615039063, 0.282656, 0.100196, 0.42216, 437.89736203125, 0.28291, 0.105393, 0.426902, 459.89327089843755, 0.283091, 0.110553, 0.431554, 481.88357142578127, 0.283197, 0.11568, 0.436115, 503.8794802929687, 0.283229, 0.120777, 0.440584, 525.8753891601563, 0.283187, 0.125848, 0.44496, 547.8656896875, 0.283072, 0.130895, 0.449241, 569.8615985546875, 0.282884, 0.13592, 0.453427, 591.8518990820313, 0.282623, 0.140926, 0.457517, 613.8478079492187, 0.28229, 0.145912, 0.46151, 635.8381084765625, 0.281887, 0.150881, 0.465405, 657.83401734375, 0.281412, 0.155834, 0.469201, 679.8243178710937, 0.280868, 0.160771, 0.472899, 701.8202267382812, 0.280255, 0.165693, 0.476498, 723.8161356054687, 0.279574, 0.170599, 0.479997, 745.8064361328125, 0.278826, 0.17549, 0.483397, 767.802345, 0.278012, 0.180367, 0.486697, 789.7926455273438, 0.277134, 0.185228, 0.489898, 811.7885543945312, 0.276194, 0.190074, 0.493001, 833.778854921875, 0.275191, 0.194905, 0.496005, 855.7747637890625, 0.274128, 0.199721, 0.498911, 877.7706726562501, 0.273006, 0.20452, 0.501721, 899.7609731835937, 0.271828, 0.209303, 0.504434, 921.7568820507813, 0.270595, 0.214069, 0.507052, 943.747182578125, 0.269308, 0.218818, 0.509577, 965.7430914453124, 0.267968, 0.223549, 0.512008, 987.7333919726562, 0.26658, 0.228262, 0.514349, 1009.7293008398437, 0.265145, 0.232956, 0.516599, 1031.7252097070311, 0.263663, 0.237631, 0.518762, 1053.715510234375, 0.262138, 0.242286, 0.520837, 1075.7114191015626, 0.260571, 0.246922, 0.522828, 1097.7017196289064, 0.258965, 0.251537, 0.524736, 1119.6976284960938, 0.257322, 0.25613, 0.526563, 1141.6879290234376, 0.255645, 0.260703, 0.528312, 1163.683837890625, 0.253935, 0.265254, 0.529983, 1185.6797467578124, 0.252194, 0.269783, 0.531579, 1207.6700472851562, 0.250425, 0.27429, 0.533103, 1229.6659561523438, 0.248629, 0.278775, 0.534556, 1251.6562566796874, 0.246811, 0.283237, 0.535941, 1273.652165546875, 0.244972, 0.287675, 0.53726, 1295.6424660742189, 0.243113, 0.292092, 0.538516, 1317.6383749414063, 0.241237, 0.296485, 0.539709, 1339.6342838085936, 0.239346, 0.300855, 0.540844, 1361.6245843359375, 0.237441, 0.305202, 0.541921, 1383.620493203125, 0.235526, 0.309527, 0.542944, 1405.6107937304687, 0.233603, 0.313828, 0.543914, 1427.6067025976563, 0.231674, 0.318106, 0.544834, 1449.597003125, 0.229739, 0.322361, 0.545706, 1471.5929119921875, 0.227802, 0.326594, 0.546532, 1493.588820859375, 0.225863, 0.330805, 0.547314, 1515.5791213867187, 0.223925, 0.334994, 0.548053, 1537.575030253906, 0.221989, 0.339161, 0.548752, 1559.56533078125, 0.220057, 0.343307, 0.549413, 1581.5612396484373, 0.21813, 0.347432, 0.550038, 1603.5515401757812, 0.21621, 0.351535, 0.550627, 1625.5474490429688, 0.214298, 0.355619, 0.551184, 1647.5433579101561, 0.212395, 0.359683, 0.55171, 1669.5336584375, 0.210503, 0.363727, 0.552206, 1691.5295673046874, 0.208623, 0.367752, 0.552675, 1713.5198678320312, 0.206756, 0.371758, 0.553117, 1735.5157766992186, 0.204903, 0.375746, 0.553533, 1757.5060772265624, 0.203063, 0.379716, 0.553925, 1779.5019860937502, 0.201239, 0.38367, 0.554294, 1801.4922866210936, 0.19943, 0.387607, 0.554642, 1823.4881954882812, 0.197636, 0.391528, 0.554969, 1845.4841043554686, 0.19586, 0.395433, 0.555276, 1867.4744048828125, 0.1941, 0.399323, 0.555565, 1889.4703137499998, 0.192357, 0.403199, 0.555836, 1911.4606142773437, 0.190631, 0.407061, 0.556089, 1933.4565231445315, 0.188923, 0.41091, 0.556326, 1955.4468236718749, 0.187231, 0.414746, 0.556547, 1977.4427325390625, 0.185556, 0.41857, 0.556753, 1999.4386414062499, 0.183898, 0.422383, 0.556944, 2021.4289419335937, 0.182256, 0.426184, 0.55712, 2043.424850800781, 0.180629, 0.429975, 0.557282, 2065.415151328125, 0.179019, 0.433756, 0.55743, 2087.4110601953125, 0.177423, 0.437527, 0.557565, 2109.401360722656, 0.175841, 0.44129, 0.557685, 2131.3972695898437, 0.174274, 0.445044, 0.557792, 2153.3931784570314, 0.172719, 0.448791, 0.557885, 2175.383478984375, 0.171176, 0.45253, 0.557965, 2197.3793878515626, 0.169646, 0.456262, 0.55803, 2219.369688378906, 0.168126, 0.459988, 0.558082, 2241.365597246094, 0.166617, 0.463708, 0.558119, 2263.3558977734374, 0.165117, 0.467423, 0.558141, 2285.351806640625, 0.163625, 0.471133, 0.558148, 2307.3477155078126, 0.162142, 0.474838, 0.55814, 2329.338016035156, 0.160665, 0.47854, 0.558115, 2351.333924902344, 0.159194, 0.482237, 0.558073, 2373.3242254296874, 0.157729, 0.485932, 0.558013, 2395.320134296875, 0.15627, 0.489624, 0.557936, 2417.3104348242186, 0.154815, 0.493313, 0.55784, 2439.3063436914063, 0.153364, 0.497, 0.557724, 2461.302252558594, 0.151918, 0.500685, 0.557587, 2483.2925530859375, 0.150476, 0.504369, 0.55743, 2505.288461953125, 0.149039, 0.508051, 0.55725, 2527.2787624804687, 0.147607, 0.511733, 0.557049, 2549.2746713476563, 0.14618, 0.515413, 0.556823, 2571.264971875, 0.144759, 0.519093, 0.556572, 2593.2608807421875, 0.143343, 0.522773, 0.556295, 2615.256789609375, 0.141935, 0.526453, 0.555991, 2637.2470901367187, 0.140536, 0.530132, 0.555659, 2659.2429990039063, 0.139147, 0.533812, 0.555298, 2681.23329953125, 0.13777, 0.537492, 0.554906, 2703.2292083984375, 0.136408, 0.541173, 0.554483, 2725.219508925781, 0.135066, 0.544853, 0.554029, 2747.2154177929688, 0.133743, 0.548535, 0.553541, 2769.2113266601564, 0.132444, 0.552216, 0.553018, 2791.2016271875, 0.131172, 0.555899, 0.552459, 2813.1975360546876, 0.129933, 0.559582, 0.551864, 2835.187836582031, 0.128729, 0.563265, 0.551229, 2857.183745449219, 0.127568, 0.566949, 0.550556, 2879.174045976563, 0.126453, 0.570633, 0.549841, 2901.16995484375, 0.125394, 0.574318, 0.549086, 2923.1602553710936, 0.124395, 0.578002, 0.548287, 2945.1561642382812, 0.123463, 0.581687, 0.547445, 2967.1520731054684, 0.122606, 0.585371, 0.546557, 2989.1423736328125, 0.121831, 0.589055, 0.545623, 3011.1382825, 0.121148, 0.592739, 0.544641, 3033.1285830273437, 0.120565, 0.596422, 0.543611, 3055.1244918945313, 0.120092, 0.600104, 0.54253, 3077.114792421875, 0.119738, 0.603785, 0.5414, 3099.1107012890625, 0.119512, 0.607464, 0.540218, 3121.1066101562496, 0.119423, 0.611141, 0.538982, 3143.0969106835937, 0.119483, 0.614817, 0.537692, 3165.0928195507813, 0.119699, 0.61849, 0.536347, 3187.083120078125, 0.120081, 0.622161, 0.534946, 3209.0790289453125, 0.120638, 0.625828, 0.533488, 3231.069329472656, 0.12138, 0.629492, 0.531973, 3253.0652383398437, 0.122312, 0.633153, 0.530398, 3275.061147207031, 0.123444, 0.636809, 0.528763, 3297.051447734375, 0.12478, 0.640461, 0.527068, 3319.0473566015626, 0.126326, 0.644107, 0.525311, 3341.037657128906, 0.128087, 0.647749, 0.523491, 3363.033565996094, 0.130067, 0.651384, 0.521608, 3385.0238665234374, 0.132268, 0.655014, 0.519661, 3407.019775390625, 0.134692, 0.658636, 0.517649, 3429.015684257812, 0.137339, 0.662252, 0.515571, 3451.005984785156, 0.14021, 0.665859, 0.513427, 3473.001893652344, 0.143303, 0.669459, 0.511215, 3494.9921941796874, 0.146616, 0.67305, 0.508936, 3516.9881030468755, 0.150148, 0.676631, 0.506589, 3538.9784035742186, 0.153894, 0.680203, 0.504172, 3560.9743124414063, 0.157851, 0.683765, 0.501686, 3582.9702213085934, 0.162016, 0.687316, 0.499129, 3604.9605218359375, 0.166383, 0.690856, 0.496502, 3626.956430703125, 0.170948, 0.694384, 0.493803, 3648.9467312304687, 0.175707, 0.6979, 0.491033, 3670.9426400976567, 0.180653, 0.701402, 0.488189, 3692.932940625, 0.185783, 0.704891, 0.485273, 3714.9288494921875, 0.19109, 0.708366, 0.482284, 3736.9247583593747, 0.196571, 0.711827, 0.479221, 3758.9150588867187, 0.202219, 0.715272, 0.476084, 3780.9109677539063, 0.20803, 0.718701, 0.472873, 3802.90126828125, 0.214, 0.722114, 0.469588, 3824.897177148438, 0.220124, 0.725509, 0.466226, 3846.887477675781, 0.226397, 0.728888, 0.462789, 3868.8833865429688, 0.232815, 0.732247, 0.459277, 3890.879295410156, 0.239374, 0.735588, 0.455688, 3912.8695959375, 0.24607, 0.73891, 0.452024, 3934.8655048046876, 0.252899, 0.742211, 0.448284, 3956.855805332031, 0.259857, 0.745492, 0.444467, 3978.8517141992183, 0.266941, 0.748751, 0.440573, 4000.8420147265624, 0.274149, 0.751988, 0.436601, 4022.83792359375, 0.281477, 0.755203, 0.432552, 4044.828224121094, 0.288921, 0.758394, 0.428426, 4066.8241329882812, 0.296479, 0.761561, 0.424223, 4088.820041855469, 0.304148, 0.764704, 0.419943, 4110.810342382812, 0.311925, 0.767822, 0.415586, 4132.80625125, 0.319809, 0.770914, 0.411152, 4154.796551777344, 0.327796, 0.77398, 0.40664, 4176.792460644531, 0.335885, 0.777018, 0.402049, 4198.782761171875, 0.344074, 0.780029, 0.397381, 4220.7786700390625, 0.35236, 0.783011, 0.392636, 4242.77457890625, 0.360741, 0.785964, 0.387814, 4264.764879433594, 0.369214, 0.788888, 0.382914, 4286.760788300781, 0.377779, 0.791781, 0.377939, 4308.751088828125, 0.386433, 0.794644, 0.372886, 4330.7469976953125, 0.395174, 0.797475, 0.367757, 4352.737298222656, 0.404001, 0.800275, 0.362552, 4374.733207089844, 0.412913, 0.803041, 0.357269, 4396.729115957031, 0.421908, 0.805774, 0.35191, 4418.719416484375, 0.430983, 0.808473, 0.346476, 4440.715325351563, 0.440137, 0.811138, 0.340967, 4462.705625878906, 0.449368, 0.813768, 0.335384, 4484.701534746094, 0.458674, 0.816363, 0.329727, 4506.691835273437, 0.468053, 0.818921, 0.323998, 4528.687744140625, 0.477504, 0.821444, 0.318195, 4550.683653007813, 0.487026, 0.823929, 0.312321, 4572.673953535156, 0.496615, 0.826376, 0.306377, 4594.669862402344, 0.506271, 0.828786, 0.300362, 4616.660162929687, 0.515992, 0.831158, 0.294279, 4638.656071796875, 0.525776, 0.833491, 0.288127, 4660.646372324219, 0.535621, 0.835785, 0.281908, 4682.642281191406, 0.545524, 0.838039, 0.275626, 4704.638190058594, 0.555484, 0.840254, 0.269281, 4726.6284905859375, 0.565498, 0.84243, 0.262877, 4748.624399453125, 0.575563, 0.844566, 0.256415, 4770.614699980469, 0.585678, 0.846661, 0.249897, 4792.610608847656, 0.595839, 0.848717, 0.243329, 4814.600909375, 0.606045, 0.850733, 0.236712, 4836.5968182421875, 0.616293, 0.852709, 0.230052, 4858.592727109375, 0.626579, 0.854645, 0.223353, 4880.583027636719, 0.636902, 0.856542, 0.21662, 4902.578936503906, 0.647257, 0.8584, 0.209861, 4924.56923703125, 0.657642, 0.860219, 0.203082, 4946.565145898438, 0.668054, 0.861999, 0.196293, 4968.555446425781, 0.678489, 0.863742, 0.189503, 4990.551355292969, 0.688944, 0.865448, 0.182725, 5012.547264160156, 0.699415, 0.867117, 0.175971, 5034.5375646875, 0.709898, 0.868751, 0.169257, 5056.533473554688, 0.720391, 0.87035, 0.162603, 5078.523774082031, 0.730889, 0.871916, 0.156029, 5100.519682949219, 0.741388, 0.873449, 0.149561, 5122.509983476562, 0.751884, 0.874951, 0.143228, 5144.50589234375, 0.762373, 0.876424, 0.137064, 5166.496192871094, 0.772852, 0.877868, 0.131109, 5188.492101738281, 0.783315, 0.879285, 0.125405, 5210.488010605469, 0.79376, 0.880678, 0.120005, 5232.478311132812, 0.804182, 0.882046, 0.114965, 5254.47422, 0.814576, 0.883393, 0.110347, 5276.464520527344, 0.82494, 0.88472, 0.106217, 5298.460429394531, 0.83527, 0.886029, 0.102646, 5320.450729921875, 0.845561, 0.887322, 0.099702, 5342.4466387890625, 0.85581, 0.888601, 0.097452, 5364.44254765625, 0.866013, 0.889868, 0.095953, 5386.432848183594, 0.876168, 0.891125, 0.09525, 5408.428757050781, 0.886271, 0.892374, 0.095374, 5430.419057578125, 0.89632, 0.893616, 0.096335, 5452.4149664453125, 0.906311, 0.894855, 0.098125, 5474.405266972656, 0.916242, 0.896091, 0.100717, 5496.401175839844, 0.926106, 0.89733, 0.104071, 5518.397084707031, 0.935904, 0.89857, 0.108131, 5540.387385234375, 0.945636, 0.899815, 0.112838, 5562.383294101563, 0.9553, 0.901065, 0.118128, 5584.373594628906, 0.964894, 0.902323, 0.123941, 5606.369503496094, 0.974417, 0.90359, 0.130215, 5628.359804023437, 0.983868, 0.904867, 0.136897, 5650.355712890625, 0.993248, 0.906157, 0.143936]
      aLUT.NanColor = [1.0, 0.0, 0.0]
      aLUT.ScalarRangeInitialized = 1.0

      # trace defaults for the display properties.
      slice1Display.Representation = 'Surface'
      slice1Display.ColorArrayName = ['CELLS', 'A']
      slice1Display.LookupTable = aLUT
      slice1Display.OSPRayScaleFunction = 'PiecewiseFunction'
      slice1Display.SelectOrientationVectors = 'None'
      slice1Display.ScaleFactor = 1.75
      slice1Display.SelectScaleArray = 'None'
      slice1Display.GlyphType = 'Arrow'
      slice1Display.GlyphTableIndexArray = 'None'
      slice1Display.GaussianRadius = 0.08750000000000001
      slice1Display.SetScaleArray = [None, '']
      slice1Display.ScaleTransferFunction = 'PiecewiseFunction'
      slice1Display.OpacityArray = [None, '']
      slice1Display.OpacityTransferFunction = 'PiecewiseFunction'
      slice1Display.DataAxesGrid = 'GridAxesRepresentation'
      slice1Display.PolarAxes = 'PolarAxesRepresentation'

      # ----------------------------------------------------------------
      # setup color maps and opacity mapes used in the visualization
      # note: the Get..() functions create a new object, if needed
      # ----------------------------------------------------------------

      # get opacity transfer function/opacity map for 'A'
      aPWF = GetOpacityTransferFunction('A')
      aPWF.Points = [42.06640625, 0.0, 0.5, 0.0, 7363.00390625, 1.0, 0.5, 0.0]
      aPWF.ScalarRangeInitialized = 1

      # ----------------------------------------------------------------
      # finally, restore active source
      SetActiveSource(slice1)
      # ----------------------------------------------------------------
    return Pipeline()

  class CoProcessor(coprocessing.CoProcessor):
    def CreatePipeline(self, datadescription):
      self.Pipeline = _CreatePipeline(self, datadescription)

  coprocessor = CoProcessor()
  # these are the frequencies at which the coprocessor updates.
  freqs = {'input': [1]}
  coprocessor.SetUpdateFrequencies(freqs)
  if requestSpecificArrays:
    arrays = [['A', 1], ['vtkGhostType', 1]]
    coprocessor.SetRequestedArrays('input', arrays)
  coprocessor.SetInitialOutputOptions(timeStepToStartOutputAt,forceOutputAtFirstCall)

  if rootDirectory:
      coprocessor.SetRootDirectory(rootDirectory)

  if make_cinema_table:
      coprocessor.EnableCinemaDTable()

  return coprocessor


#--------------------------------------------------------------
# Global variable that will hold the pipeline for each timestep
# Creating the CoProcessor object, doesn't actually create the ParaView pipeline.
# It will be automatically setup when coprocessor.UpdateProducers() is called the
# first time.
coprocessor = CreateCoProcessor()

#--------------------------------------------------------------
# Enable Live-Visualizaton with ParaView and the update frequency
coprocessor.EnableLiveVisualization(False, 1)

# ---------------------- Data Selection method ----------------------

def RequestDataDescription(datadescription):
    "Callback to populate the request for current timestep"
    global coprocessor

    # setup requests for all inputs based on the requirements of the
    # pipeline.
    coprocessor.LoadRequestedData(datadescription)

# ------------------------ Processing method ------------------------

def DoCoProcessing(datadescription):
    "Callback to do co-processing for current timestep"
    global coprocessor

    # Update the coprocessor by providing it the newly generated simulation data.
    # If the pipeline hasn't been setup yet, this will setup the pipeline.
    coprocessor.UpdateProducers(datadescription)

    # Write output data, if appropriate.
    coprocessor.WriteData(datadescription);

    # Write image capture (Last arg: rescale lookup table), if appropriate.
    coprocessor.WriteImages(datadescription, rescale_lookuptable=rescale_lookuptable,
        image_quality=0, padding_amount=imageFileNamePadding)

    # Live Visualization, if enabled.
    coprocessor.DoLiveVisualization(datadescription, "localhost", 22222)
